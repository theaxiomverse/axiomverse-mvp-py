# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from protocol import quantum_pb2 as protocol_dot_quantum__pb2

GRPC_GENERATED_VERSION = '1.67.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in protocol/quantum_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class QuantumNodeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateVector = channel.unary_unary(
                '/quantum.QuantumNode/CreateVector',
                request_serializer=protocol_dot_quantum__pb2.CreateVectorRequest.SerializeToString,
                response_deserializer=protocol_dot_quantum__pb2.VectorResponse.FromString,
                _registered_method=True)
        self.VerifyVector = channel.unary_unary(
                '/quantum.QuantumNode/VerifyVector',
                request_serializer=protocol_dot_quantum__pb2.VerifyVectorRequest.SerializeToString,
                response_deserializer=protocol_dot_quantum__pb2.VerificationResponse.FromString,
                _registered_method=True)
        self.GenerateProof = channel.unary_unary(
                '/quantum.QuantumNode/GenerateProof',
                request_serializer=protocol_dot_quantum__pb2.ProofRequest.SerializeToString,
                response_deserializer=protocol_dot_quantum__pb2.ProofResponse.FromString,
                _registered_method=True)
        self.ProcessQuantumOperation = channel.unary_unary(
                '/quantum.QuantumNode/ProcessQuantumOperation',
                request_serializer=protocol_dot_quantum__pb2.QuantumOperationRequest.SerializeToString,
                response_deserializer=protocol_dot_quantum__pb2.QuantumOperationResponse.FromString,
                _registered_method=True)
        self.SubscribeToVectorUpdates = channel.unary_stream(
                '/quantum.QuantumNode/SubscribeToVectorUpdates',
                request_serializer=protocol_dot_quantum__pb2.VectorFilter.SerializeToString,
                response_deserializer=protocol_dot_quantum__pb2.VectorUpdate.FromString,
                _registered_method=True)


class QuantumNodeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateVector(self, request, context):
        """Vector Operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyVector(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateProof(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessQuantumOperation(self, request, context):
        """Quantum Operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToVectorUpdates(self, request, context):
        """Streaming Vector Updates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QuantumNodeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateVector': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateVector,
                    request_deserializer=protocol_dot_quantum__pb2.CreateVectorRequest.FromString,
                    response_serializer=protocol_dot_quantum__pb2.VectorResponse.SerializeToString,
            ),
            'VerifyVector': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyVector,
                    request_deserializer=protocol_dot_quantum__pb2.VerifyVectorRequest.FromString,
                    response_serializer=protocol_dot_quantum__pb2.VerificationResponse.SerializeToString,
            ),
            'GenerateProof': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateProof,
                    request_deserializer=protocol_dot_quantum__pb2.ProofRequest.FromString,
                    response_serializer=protocol_dot_quantum__pb2.ProofResponse.SerializeToString,
            ),
            'ProcessQuantumOperation': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessQuantumOperation,
                    request_deserializer=protocol_dot_quantum__pb2.QuantumOperationRequest.FromString,
                    response_serializer=protocol_dot_quantum__pb2.QuantumOperationResponse.SerializeToString,
            ),
            'SubscribeToVectorUpdates': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToVectorUpdates,
                    request_deserializer=protocol_dot_quantum__pb2.VectorFilter.FromString,
                    response_serializer=protocol_dot_quantum__pb2.VectorUpdate.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'quantum.QuantumNode', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('quantum.QuantumNode', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class QuantumNode(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateVector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/quantum.QuantumNode/CreateVector',
            protocol_dot_quantum__pb2.CreateVectorRequest.SerializeToString,
            protocol_dot_quantum__pb2.VectorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyVector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/quantum.QuantumNode/VerifyVector',
            protocol_dot_quantum__pb2.VerifyVectorRequest.SerializeToString,
            protocol_dot_quantum__pb2.VerificationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateProof(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/quantum.QuantumNode/GenerateProof',
            protocol_dot_quantum__pb2.ProofRequest.SerializeToString,
            protocol_dot_quantum__pb2.ProofResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessQuantumOperation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/quantum.QuantumNode/ProcessQuantumOperation',
            protocol_dot_quantum__pb2.QuantumOperationRequest.SerializeToString,
            protocol_dot_quantum__pb2.QuantumOperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeToVectorUpdates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/quantum.QuantumNode/SubscribeToVectorUpdates',
            protocol_dot_quantum__pb2.VectorFilter.SerializeToString,
            protocol_dot_quantum__pb2.VectorUpdate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
